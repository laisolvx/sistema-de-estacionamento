unit uEstacionamento;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, uTelaPadrao01, sSkinManager, UCrpeClasses, UCrpe32, DB, ADODB,
  sNomeStored, sChamaLocalizar, sEnter, Buttons, sSpeedButton, ExtCtrls, sPanel,
  sComboBox, sCombo_Box, StdCtrls, Grids, DBGrids, Mask, sMaskEdit, sEdit_Text,
  sCheckBox, sCheck_Box, sScrollBox, sFrameBar, ComCtrls, IdBaseComponent,
  IdComponent, IdTCPConnection, IdTCPClient, IdHTTP, IdSSLOpenSSL, SuperObject, supertypes, IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdSSL;

type
  TFEstacionamento = class(TFTelaPadrao01)
    Label3: TLabel;
    Edit1: TEdit;
    Memo2: TMemo;
    Button1: TButton;
  private
    procedure BuscarCep(CEP: string);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FEstacionamento: TFEstacionamento;

implementation

{$R *.dfm}

procedure TFEstacionamento.BuscarCep(CEP: string);
var
  IdHTTP: TIdHTTP;
  URL: string;
  JSONResponse: string;
  dadosGetCep: ISuperObject;
begin
  IdHTTP := TIdHTTP.Create(nil);
  try
    IdHTTP.IOHandler := TIdSSLIOHandlerSocketOpenSSL.Create(nil);
    URL := 'https://viacep.com.br/ws/' + CEP + '/json';

    try
      JSONResponse := IdHTTP.Get(URL);
      Memo2.Lines.Text := JSONResponse;

      dadosGetCep := SO(JSONResponse);
      Memo2.Lines.Add('Logradouro: ' + dadosGetCep.S['logradouro']);
      Memo2.Lines.Add('Complemento: ' + dadosGetCep.S['complemento']);
      Memo2.Lines.Add('Bairro: ' + dadosGetCep.S['bairro']);
      Memo2.Lines.Add('Localidade: ' + dadosGetCep.S['localidade']);
      Memo2.Lines.Add('UF: ' + dadosGetCep.S['uf']);
    except
      on E: Exception do
        ShowMessage('Erro ao fazer a solicitação: ' + E.Message);
    end;
  finally
    IdHTTP.Free;
  end;
end;

end.

