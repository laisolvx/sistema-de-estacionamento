
unit uEstacionamento;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, uTelaPadrao01, sSkinManager, UCrpeClasses, UCrpe32, DB, ADODB,
  sNomeStored, sChamaLocalizar, sEnter, Buttons, sSpeedButton, ExtCtrls, sPanel,
  sComboBox, sCombo_Box, StdCtrls, Grids, DBGrids, Mask, sMaskEdit, sEdit_Text,
  sCheckBox, sCheck_Box, sScrollBox, sFrameBar, ComCtrls, sEdit, IdBaseComponent,
  IdComponent, IdIOHandler, IdIOHandlerSocket, IdIOHandlerStack, IdSSL, IdSSLOpenSSL, IdHTTP,
  IdTCPConnection, IdTCPClient, HTTPApp, SuperObject, supertypes;

type
  TFEstacionamento = class(TFTelaPadrao01)
    Button1: TButton;
    Label3: TLabel;
    Edit1: TEdit;
    IdHTTP1: TIdHTTP;
    sEdit_Text1: TsEdit_Text;
    Label4: TLabel;
    sEdit_Text2: TsEdit_Text;
    Label5: TLabel;
    sEdit_Text3: TsEdit_Text;
    Label6: TLabel;
    sEdit_Text4: TsEdit_Text;
    Label7: TLabel;
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FEstacionamento: TFEstacionamento;

implementation

{$R *.dfm}

function BuscarCep(cep: string): ISuperObject;
var
  IdHTTP: TIdHTTP;
  SSLHandler: TIdSSLIOHandlerSocketOpenSSL;
  Url: string;
  jsonResponse: string;

begin
  Url := 'http://viacep.com.br/ws/'+cep+'/json/';

  IdHTTP := TIdHTTP.Create(nil);
  try
    SSLHandler := TIdSSLIOHandlerSocketOpenSSL.Create(IdHTTP);
    IdHTTP.IOHandler := SSLHandler;

    IdHTTP.Request.ContentType := 'application/json';

    try
      jsonResponse := IdHTTP.Get(Url);
      Result := SO(jsonResponse);
    except
      on E: Exception do
      begin
        Result := SO;
        Result.S['status'] := 'erro';
        Result.S['erroCode'] := '02';
        Result.S['erroMessage'] := 'Não foi possível conectar com a API! ' +
          'Por favor, tente mais tarde.';
      end;
    end;
  finally
    IdHTTP.Free;
  end;
end;

procedure TFEstacionamento.Button1Click(Sender: TObject);
var
  cep: string;
  resultCep: ISuperObject;
  dadosGetCep: ISuperObject;
  jsonResponse: string;
  JsonString: String;
  Json: ISuperObject;
begin
  inherited;


  cep := Edit1.Text;

  if Length(CEP) <> 8 then
  begin
    ShowMessage('CEP Inválido! Por favor, verificar.');
    Exit;
  end;

  // Chame a função BuscarCep para obter a resposta da API
  resultCep := BuscarCep(cep);

  // Verifique se há uma resposta válida
  if Assigned(resultCep) then
  begin
    // Exiba o JSON de resposta em uma mensagem
    jsonResponse := resultCep.AsJSON;
    ShowMessage('Resposta da API: ' + jsonResponse);

    // Obtenha os dados desejados

      JsonString:= jsonResponse;
      Json := SO(JsonString);

    dadosGetCep := resultCep.O['dadosGetCepAPI'];
    sEdit_Text1.Text := json.S['logradouro'];
    sEdit_Text2.Text := json.S['bairro'];
    sEdit_Text3.Text := json.S['localidade'];
    sEdit_Text4.Text := json.S['cep'];


  end
  else
  begin
    // Trate o caso em que não há resposta válida
    ShowMessage('Erro ao buscar dados da API.');
  end;

  // Lembre-se de liberar a memória quando terminar
  resultCep := nil;
end;

end.
